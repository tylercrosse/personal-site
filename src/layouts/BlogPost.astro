---
import { Image } from "astro:assets";

import type { CollectionEntry } from "astro:content";
import type { MarkdownHeading } from "astro";
import BaseHead from "../components/BaseHead.astro";
import Header from "../components/Header.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import TableOfContents from "../components/TableOfContents.astro";

type Props = CollectionEntry<"blog">["data"] & {
  headings?: MarkdownHeading[];
};

const {
  title,
  description,
  pubDate,
  updated,
  heroImage,
  image,
  headings,
  status,
  type,
  tags,
} = Astro.props;

// Helper function to get image source and alt text from either format
const getImageData = () => {
  if (heroImage) {
    return { src: heroImage, alt: "" };
  }
  if (image) {
    return { src: image.path, alt: image.alt };
  }
  return null;
};

const imageData = getImageData();
---

<html lang="en">
  <head>
    <BaseHead
      title={title}
      description={description}
      image={imageData?.src as string}
    />
    <style>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }

      .title {
        margin-bottom: 1em;
        padding-bottom: 1em;
      }

      .title-meta {
        display: flex;
        gap: 1em;
        font-size: 0.7em;
        text-transform: capitalize;
        margin-bottom: 1em;
        color: var(--sol-7);
      }

      .title h1 {
        margin-bottom: 0.5em;
        max-width: 800px;
        text-align: start;
      }
      .title-container {
        display: flex;
        flex-direction: column;
        max-width: 800px;
        margin: auto;
      }
      .meta {
        display: flex;
        justify-content: space-between;
        max-width: 800px;
        margin: auto;
        font-size: 0.7em;
        margin: 2em 0;
      }
      .dates {
        color: var(--sol-7);
        flex-shrink: 0;
        text-align: right;
        padding: 0.25em 0;
      }
      .last-updated-on {
        margin-top: 0.6em;
      }
      .tags {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5em;
      }
      .tag {
        background: rgb(var(--accent));
        color: var(--blue);
        padding: 0.25em 0.5em;
        padding-left: 0;
        border-radius: 0.25em;
        text-decoration: none;
        transition: background-color 0.2s ease;
        text-transform: capitalize;
      }
      .tag:hover {
        background: rgb(var(--accent-dark));
      }

      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
      }

      .prose {
        margin: auto;
        display: grid;
        grid-template-columns: 1fr min(800px, 100%) 1fr;
      }
      .prose > :global(*) {
        grid-column: 2;
      }

      /* Responsive adjustments for ToC */
      @media (max-width: 1279px) {
        /* .prose {
          grid-template-columns: 1fr;
          gap: 1rem;
        }
        .prose > :global(*) {
          grid-column: 1;
        } */
        .title {
          grid-column: 1 !important;
        }
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <header class="title">
          <div class="title-container">
            <div class="title-meta">
              <span>{type}</span>
              <span>{status}</span>
            </div>
            <h1>{title}</h1>
            <div class="description">{description}</div>
            <div class="meta">
              {
                tags && tags.length > 0 && (
                  <div class="tags">
                    {tags.map((tag) => (
                      <span class="tag">{tag}</span>
                    ))}
                  </div>
                )
              }
              <div class="dates">
                <div class="published-on">
                  Published <FormattedDate date={pubDate || new Date()} />
                </div>
                {
                  updated && (
                    <div class="last-updated-on">
                      Updated <FormattedDate date={updated} />
                    </div>
                  )
                }
              </div>
            </div>
          </div>
          <div class="hero-image">
            {
              imageData && (
                <Image
                  width={1020}
                  height={510}
                  src={imageData.src as string}
                  alt={imageData.alt}
                />
              )
            }
          </div>
        </header>
        <div class="prose">
          <div class="content-with-toc" style="position: relative;">
            <slot />
          </div>
          <TableOfContents headings={headings || []} />
        </div>
      </article>
    </main>
    <Footer />
  </body>
</html>
