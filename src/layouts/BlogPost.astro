---
import { Image } from "astro:assets";

import type { CollectionEntry } from "astro:content";
import type { MarkdownHeading } from "astro";
import FormattedDate from "../components/FormattedDate.astro";
import TableOfContents from "../components/TableOfContents.astro";
import Comments from "../components/Comments.astro";
import BaseLayout from "./BaseLayout.astro";

type Props = CollectionEntry<"ideas">["data"] & {
  headings?: MarkdownHeading[];
  readingTimeText: string;
};

const {
  title,
  description,
  pubDate,
  updated,
  heroImage,
  image,
  headings,
  status,
  type,
  tags,
  draft,
  readingTimeText,
  hideCaption,
} = Astro.props;

const getImageData = () => {
  if (heroImage) {
    return { src: heroImage, alt: "" };
  }
  if (image) {
    return { src: image.path, alt: image.alt };
  }
  return null;
};

const imageData = getImageData();

const ogImage = image?.path || heroImage;
---

<BaseLayout
  title={title}
  description={description}
  image={ogImage}
>
  <article class="space-y-12">
    <header class="space-y-6 animate-fade-scale">
      <div class="space-y-4">
        <div class="flex flex-wrap items-center gap-3 text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-300">
          {draft && (
            <span class="inline-flex items-center rounded-full bg-amber-100 px-3 py-1 text-[0.7rem] font-bold text-amber-700 dark:bg-amber-500/20 dark:text-amber-200">
              Draft
            </span>
          )}
          {type && <span>{type}</span>}
          {status && <span>{status}</span>}
          <span>{readingTimeText}</span>
        </div>
        <h1 class="max-w-3xl text-4xl font-serif font-bold text-slate-900 dark:text-white sm:text-5xl">
          {title}
        </h1>
        {description && (
          <p class="max-w-2xl text-lg text-slate-600 dark:text-slate-300">
            {description}
          </p>
        )}
      </div>
      <div class="flex flex-wrap items-start justify-between gap-6 text-sm text-slate-500 dark:text-slate-400">
        {tags && tags.length > 0 && (
          <div class="flex flex-wrap gap-2">
            {tags.map((tag) => (
              <span class="inline-flex items-center rounded-full bg-accent/10 px-3 py-1 text-xs font-semibold uppercase tracking-wide text-accent dark:bg-accent/20 dark:text-accent-dark">
                {tag}
              </span>
            ))}
          </div>
        )}
        <div class="space-y-1 text-right">
          <div>
            Published <FormattedDate date={pubDate || new Date()} />
          </div>
          {updated && (
            <div class="text-xs uppercase tracking-wide text-slate-400 dark:text-slate-500">
              Updated <FormattedDate date={updated} />
            </div>
          )}
        </div>
      </div>
      {imageData && (
        <figure class="space-y-3">
          <Image
            width={1200}
            height={600}
            src={imageData.src as string}
            alt={imageData.alt}
            class="w-full rounded-2xl shadow-lg"
          />
          {imageData.alt && !hideCaption && (
            <figcaption class="text-sm italic text-slate-500 dark:text-slate-300">
              {imageData.alt}
            </figcaption>
          )}
        </figure>
      )}
    </header>

    <div class="xl:grid xl:grid-cols-[minmax(0,1fr)_18rem] xl:items-start xl:gap-10">
      <div class="prose prose-slate max-w-none space-y-10 leading-relaxed dark:prose-invert">
        <slot />
        <Comments />
      </div>
      <TableOfContents headings={headings || []} />
    </div>
  </article>
</BaseLayout>
