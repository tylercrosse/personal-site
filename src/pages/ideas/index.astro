---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import BaseLayout from "../../layouts/BaseLayout.astro";
import { SITE_TITLE, SITE_DESCRIPTION } from "../../consts";
import FormattedDate from "../../components/FormattedDate.astro";
import readingTime from "reading-time";

const capitalize = (s: string) => {
  if (typeof s !== "string" || !s) return s;
  return s.charAt(0).toUpperCase() + s.slice(1);
};

const posts = (await getCollection("ideas"))
  .filter((post) => {
    return import.meta.env.DEV || !post.data.draft;
  })
  .sort((a, b) => {
    const aDate = a.data.pubDate || a.data.date;
    const bDate = b.data.pubDate || b.data.date;
    return new Date(bDate || 0).valueOf() - new Date(aDate || 0).valueOf();
  });

const allTags = [
  ...new Set(posts.flatMap((post) => post.data.tags || [])),
].sort((a, b) => a.localeCompare(b));
const allTypes = [
  ...new Set(posts.map((post) => post.data.type).filter(Boolean)),
];
const allStatuses = [
  ...new Set(posts.map((post) => post.data.status).filter(Boolean)),
];

const allPostsData = posts.map((post) => {
  const slug = post.id.replace(/(\/index)?\.(md|mdx)$/, "");
  const stats = readingTime(post.body || "");
  return {
    id: post.id,
    slug,
    title: post.data.title,
    description: post.data.description,
    date: post.data.date,
    updated: post.data.updated,
    type: post.data.type,
    status: post.data.status,
    tags: post.data.tags || [],
    image: post.data.image,
    draft: post.data.draft,
    readingTimeText: stats.text,
    parent: post.data.parent,
  };
});

const childrenByParent = new Map<string, typeof allPostsData>();
allPostsData.forEach((post) => {
  if (post.parent) {
    if (!childrenByParent.has(post.parent)) {
      childrenByParent.set(post.parent, []);
    }
    childrenByParent.get(post.parent)!.push(post);
  }
});

const hierarchicalPosts = allPostsData
  .filter((post) => !post.parent)
  .map((post) => {
    const children = childrenByParent.get(post.slug) || [];
    children.sort((a, b) => {
      const aDate = a.date;
      const bDate = b.date;
      return new Date(aDate || 0).valueOf() - new Date(bDate || 0).valueOf();
    });
    return {
      ...post,
      children,
    };
  });
---

<BaseLayout title="Ideas" description={`Notes, projects, and writing from ${SITE_TITLE}. ${SITE_DESCRIPTION}`}>
  <header class="space-y-8 animate-fade-scale" style={{ animationDelay: "0.1s" }}>
    <div class="space-y-4 text-center">
      <h1 class="text-4xl font-serif font-bold text-slate-900 dark:text-white sm:text-5xl">Digital Garden</h1>
      <p class="mx-auto max-w-2xl text-base text-slate-600 dark:text-slate-300">
        The notes, thoughts, and projects I've been working on.
      </p>
    </div>
    <div class="js-required space-y-4" data-pagefind-ignore>
      <div class="flex flex-col gap-3 text-sm text-slate-600 dark:text-slate-300 sm:flex-row sm:items-center">
        <label class="flex items-center gap-2">
          <span class="font-medium">Type:</span>
          <select
            id="type-filter"
            class="rounded-lg border border-slate-200 bg-white/60 px-3 py-2 text-sm capitalize shadow-sm focus:border-accent focus:outline-none dark:border-slate-700 dark:bg-slate-900/60"
          >
            <option value="all">All types</option>
            {allTypes.map((type) => <option value={type}>{capitalize(type || "")}</option>)}
          </select>
        </label>
        <label class="flex items-center gap-2">
          <span class="font-medium">Status:</span>
          <select
            id="status-filter"
            class="rounded-lg border border-slate-200 bg-white/60 px-3 py-2 text-sm capitalize shadow-sm focus:border-accent focus:outline-none dark:border-slate-700 dark:bg-slate-900/60"
          >
            <option value="all">All statuses</option>
            {allStatuses.map((status) => (
              <option value={status}>{capitalize(status || "")}</option>
            ))}
          </select>
        </label>
      </div>
      <div class="filters">
        <ul class="tag-list flex flex-wrap gap-2 text-sm">
          <li>
            <button
              class="active rounded-full bg-accent/20 px-3 py-1 font-semibold text-accent transition hover:bg-accent/30"
              id="all-tags"
            >
              All Topics
            </button>
          </li>
          {allTags.map((tag) => (
            <li>
              <button
                data-tag={tag}
                class="rounded-full bg-white/60 px-3 py-1 text-slate-600 transition hover:bg-accent/20 hover:text-accent dark:bg-slate-900/60 dark:text-slate-300"
              >
                {tag}
              </button>
            </li>
          ))}
        </ul>
      </div>
    </div>
  </header>

  <section
    class="post-grid mt-8 flex flex-col gap-6 animate-fade-scale lg:flex-row lg:items-start"
    style={{ animationDelay: "0.2s" }}
    data-pagefind-ignore
  >
    <div class="masonry-column flex w-full flex-col gap-6" data-column="0">
      {hierarchicalPosts.map((post) => {
        const typeClass = post.type ? `post-card--${post.type}` : "";
        const hasChildren = post.children && post.children.length > 0;

        return (
          <div
            class={`post-card ${typeClass} rounded-2xl border border-slate-200 bg-white/70 shadow-sm transition hover:-translate-y-1 hover:shadow-lg dark:border-slate-700 dark:bg-slate-900/70`}
            data-parent-slug={post.slug}
            data-tags={post.tags?.join(" ")}
            data-type={post.type}
            data-status={post.status}
            data-has-parent="false"
          >
            <a
              href={`/ideas/${post.slug}/`}
              class="post-card-link group flex h-full flex-col"
            >
              {post.image?.path && (
                <Image
                  src={post.image.path}
                  alt={post.image.alt || ""}
                  width={800}
                  height={post.type === "retro" ? 300 : 200}
                  class="h-52 w-full object-cover"
                />
              )}

              <div class="post-card-content flex flex-1 flex-col gap-4 p-5">
                <div class="post-card-content-header flex flex-wrap items-center gap-2 text-xs font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400">
                  {post.draft && (
                    <span class="rounded-full bg-amber-100 px-2 py-1 text-[0.6rem] text-amber-700 dark:bg-amber-500/20 dark:text-amber-200">
                      Draft
                    </span>
                  )}
                  {post.type && <span>{capitalize(post.type)}</span>}
                  {post.status && <span>{capitalize(post.status)}</span>}
                  <span class="ml-auto text-[0.65rem] font-medium tracking-wide">{post.readingTimeText}</span>
                </div>
                <h3 class="text-2xl font-serif font-semibold text-slate-900 transition group-hover:text-accent dark:text-white">
                  {post.title}
                </h3>
                <p class="text-sm text-slate-600 dark:text-slate-300">{post.description}</p>
                <div class="post-meta flex flex-wrap items-center justify-between text-xs uppercase tracking-wide text-slate-500 dark:text-slate-400">
                  <span>
                    <FormattedDate date={post.date || new Date()} />
                  </span>
                  {post.updated && (
                    <span class="text-[0.65rem]">
                      Updated: <FormattedDate date={post.updated} />
                    </span>
                  )}
                </div>
              </div>
            </a>

            {hasChildren && (
              <div
                class="child-posts flex flex-col divide-y border-t border-slate-200 dark:divide-slate-700 dark:border-slate-700"
                data-parent={post.slug}
              >
                {post.children.map((child) => {
                  const childTypeClass = child.type ? `post-card--${child.type}` : "";

                  return (
                    <a
                      href={`/ideas/${child.slug}/`}
                      class={`child-post-item ${childTypeClass} flex gap-3 bg-white/60 p-4 transition hover:bg-accent/10 dark:bg-slate-900/60 dark:hover:bg-accent/20`}
                      data-tags={child.tags?.join(" ")}
                      data-type={child.type}
                      data-status={child.status}
                      data-has-parent="true"
                      data-parent-post={post.slug}
                    >
                      {child.image?.path && (
                        <Image
                          src={child.image.path}
                          alt={child.image.alt || ""}
                          width={240}
                          height={120}
                          class="h-24 w-32 flex-shrink-0 rounded-lg object-cover"
                        />
                      )}

                      <div class="child-post-content flex flex-1 flex-col gap-2">
                        <div class="post-card-content-header flex flex-wrap items-center gap-2 text-[0.65rem] font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-400">
                          {child.draft && (
                            <span class="rounded-full bg-amber-100 px-2 py-1 text-[0.6rem] text-amber-700 dark:bg-amber-500/20 dark:text-amber-200">
                              Draft
                            </span>
                          )}
                          {child.type && <span>{capitalize(child.type)}</span>}
                          {child.status && <span>{capitalize(child.status)}</span>}
                          <span class="ml-auto">{child.readingTimeText}</span>
                        </div>
                        <h3 class="text-lg font-semibold text-slate-900 transition group-hover:text-accent dark:text-white">
                          {child.title}
                        </h3>
                        <p class="text-sm text-slate-600 dark:text-slate-300">{child.description}</p>
                        <div class="post-meta flex flex-wrap items-center justify-between text-[0.65rem] uppercase tracking-wide text-slate-500 dark:text-slate-400">
                          <span>
                            <FormattedDate date={child.date || new Date()} />
                          </span>
                          {child.updated && (
                            <span>
                              Updated: <FormattedDate date={child.updated} />
                            </span>
                          )}
                        </div>
                      </div>
                    </a>
                  );
                })}
              </div>
            )}
          </div>
        );
      })}
    </div>
    <div class="masonry-column hidden w-full flex-col gap-6" data-column="1"></div>
    <div class="masonry-column hidden w-full flex-col gap-6" data-column="2"></div>
  </section>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const postGrid = document.querySelector('.post-grid') as HTMLElement;
      const columns = Array.from(document.querySelectorAll('.masonry-column')) as HTMLElement[];

      if (!postGrid || columns.length === 0) return;

      const postItems = Array.from(columns[0].querySelectorAll('.post-card')) as HTMLElement[];

      function getVisibleColumns() {
        const width = window.innerWidth;
        if (width < 768) {
          return [columns[0]];
        }
        if (width < 1200) {
          return [columns[0], columns[1]];
        }
        return columns;
      }

      function layoutMasonry() {
        const visibleColumns = getVisibleColumns();

        columns.forEach((col) => {
          col.innerHTML = '';
          col.classList.add('hidden');
        });

        visibleColumns.forEach((col) => col.classList.remove('hidden'));

        postItems.forEach((item) => {
          if (item.classList.contains('hidden')) {
            visibleColumns[0].appendChild(item);
            return;
          }

          let shortestColumn = visibleColumns[0];
          let shortestHeight = visibleColumns[0].offsetHeight;

          visibleColumns.forEach((col) => {
            if (col.offsetHeight < shortestHeight) {
              shortestHeight = col.offsetHeight;
              shortestColumn = col;
            }
          });

          shortestColumn.appendChild(item);
        });
      }

      layoutMasonry();

      let resizeTimeout: ReturnType<typeof setTimeout>;
      window.addEventListener('resize', () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(layoutMasonry, 150);
      });

      let activeTag = "all";
      let activeType = "all";
      let activeStatus = "all";
      let activeHierarchy = "all";

      function filterPosts() {
        postItems.forEach((container) => {
          const parentTags = container.dataset.tags?.split(" ") || [];
          const parentType = container.dataset.type;
          const parentStatus = container.dataset.status;

          const parentTagMatch = activeTag === "all" || parentTags.includes(activeTag);
          const parentTypeMatch = activeType === "all" || parentType === activeType;
          const parentStatusMatch = activeStatus === "all" || parentStatus === activeStatus;

          const childContainer = container.querySelector('.child-posts') as HTMLElement;
          let anyChildMatches = false;
          if (childContainer) {
            const childItems = Array.from(childContainer.querySelectorAll('.child-post-item')) as HTMLElement[];
            childItems.forEach((childItem) => {
              const childTags = childItem.dataset.tags?.split(" ") || [];
              const childType = childItem.dataset.type;
              const childStatus = childItem.dataset.status;

              const childTagMatch = activeTag === "all" || childTags.includes(activeTag);
              const childTypeMatch = activeType === "all" || childType === activeType;
              const childStatusMatch = activeStatus === "all" || childStatus === activeStatus;

              if (childTagMatch && childTypeMatch && childStatusMatch) {
                childItem.classList.remove("hidden");
                anyChildMatches = true;
              } else {
                childItem.classList.add("hidden");
              }
            });
          }

          const shouldShowParent = (parentTagMatch && parentTypeMatch && parentStatusMatch) ||
            (activeHierarchy === "all" && anyChildMatches);

          if (activeHierarchy === "top-level") {
            if (parentTagMatch && parentTypeMatch && parentStatusMatch) {
              container.classList.remove("hidden");
              if (childContainer) {
                childContainer.style.display = "none";
              }
            } else {
              container.classList.add("hidden");
            }
          } else {
            if (shouldShowParent) {
              container.classList.remove("hidden");
              if (childContainer) {
                childContainer.style.display = anyChildMatches ? "flex" : "none";
              }
            } else {
              container.classList.add("hidden");
            }
          }
        });

        requestAnimationFrame(() => {
          layoutMasonry();
        });
      }

      const tagButtons = document.querySelectorAll('.tag-list button');
      tagButtons.forEach((button) => {
        button.addEventListener('click', () => {
          tagButtons.forEach((btn) => btn.classList.remove('active', 'bg-accent/20', 'text-accent'));
          button.classList.add('active', 'bg-accent/20', 'text-accent');
          const b = button as HTMLElement;
          activeTag = b.id === 'all-tags' ? 'all' : b.dataset.tag || 'all';
          filterPosts();
        });
      });

      const typeFilter = document.getElementById('type-filter') as HTMLSelectElement;
      if (typeFilter) {
        typeFilter.addEventListener('change', (e) => {
          activeType = (e.target as HTMLSelectElement).value;
          filterPosts();
        });
      }

      const statusFilter = document.getElementById('status-filter') as HTMLSelectElement;
      if (statusFilter) {
        statusFilter.addEventListener('change', (e) => {
          activeStatus = (e.target as HTMLSelectElement).value;
          filterPosts();
        });
      }

      const hierarchyFilter = document.getElementById('hierarchy-filter') as HTMLSelectElement;
      if (hierarchyFilter) {
        hierarchyFilter.addEventListener('change', (e) => {
          activeHierarchy = (e.target as HTMLSelectElement).value;
          filterPosts();
        });
      }
    });
  </script>
</BaseLayout>
