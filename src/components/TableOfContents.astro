---
import type { MarkdownHeading } from "astro";

interface Props {
  headings: MarkdownHeading[];
}

const { headings } = Astro.props;

const filteredHeadings = headings?.filter(({ depth }) => depth >= 2 && depth <= 4) || [];

function buildHierarchy(headings: MarkdownHeading[]) {
  const toc: any[] = [];
  const parentHeadings = new Map();

  if (!headings) return toc;

  headings.forEach((h) => {
    const heading = { ...h, subheadings: [] };
    parentHeadings.set(heading.depth, heading);

    if (heading.depth === 2) {
      toc.push(heading);
    } else {
      const parent = parentHeadings.get(heading.depth - 1);
      if (parent) {
        parent.subheadings.push(heading);
      }
    }
  });

  return toc;
}

const toc = buildHierarchy(filteredHeadings);
---

{toc.length > 0 && (
  <>
    <nav
      class="desktop-toc sticky top-24 hidden h-[calc(100vh-6rem)] w-60 overflow-y-auto rounded-xl border border-slate-200 bg-white/80 p-4 text-sm shadow-lg backdrop-blur transition dark:border-slate-700 dark:bg-slate-900/80 xl:block"
      aria-label="Table of Contents"
    >
      <div class="toc-header mb-4 flex items-center justify-between gap-2 border-b border-slate-200 pb-3 text-slate-600 dark:border-slate-700 dark:text-slate-300">
        <h4 class="text-sm font-semibold uppercase tracking-wide text-slate-500 dark:text-slate-300">Contents</h4>
        <button
          class="toc-collapse-btn inline-flex h-8 w-8 items-center justify-center rounded-md text-slate-500 transition hover:bg-slate-100 hover:text-accent dark:text-slate-300 dark:hover:bg-slate-800"
          id="desktop-toc-toggle"
          aria-label="Toggle table of contents"
          title="Toggle table of contents"
        >
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M9 18l6-6-6-6" />
          </svg>
        </button>
      </div>
      <ul class="toc-list space-y-2">
        {toc.map((heading) => (
          <li class="toc-item" data-level={heading.depth}>
            <a
              href={`#${heading.slug}`}
              class:list={[
                "toc-link block border-l-2 border-transparent pl-3 text-sm text-slate-600 transition hover:border-accent hover:text-accent dark:text-slate-300",
                heading.depth === 3 && "text-xs opacity-80",
                heading.depth === 4 && "text-xs opacity-70 pl-5",
              ]}
              data-heading={heading.slug}
            >
              {heading.text}
            </a>
            {heading.subheadings.length > 0 && (
              <ul class="toc-sublist ml-3 space-y-2 overflow-hidden max-h-0 transition-[max-height] duration-300 ease-in-out">
                {heading.subheadings.map((subheading: any) => (
                  <li class="toc-item" data-level={subheading.depth}>
                    <a
                      href={`#${subheading.slug}`}
                      class:list={[
                        "toc-link block border-l-2 border-transparent pl-4 text-sm text-slate-600 transition hover:border-accent hover:text-accent dark:text-slate-300",
                        subheading.depth === 3 && "text-xs opacity-80",
                        subheading.depth === 4 && "text-xs opacity-70 pl-6",
                      ]}
                      data-heading={subheading.slug}
                    >
                      {subheading.text}
                    </a>
                    {subheading.subheadings && subheading.subheadings.length > 0 && (
                      <ul class="toc-sublist ml-3 space-y-2 overflow-hidden max-h-0 transition-[max-height] duration-300 ease-in-out">
                        {subheading.subheadings.map((subsubheading: any) => (
                          <li class="toc-item" data-level={subsubheading.depth}>
                            <a
                              href={`#${subsubheading.slug}`}
                              class:list={[
                                "toc-link block border-l-2 border-transparent pl-6 text-sm text-slate-600 transition hover:border-accent hover:text-accent dark:text-slate-300",
                                subsubheading.depth === 3 && "text-xs opacity-80",
                                subsubheading.depth === 4 && "text-xs opacity-70 pl-8",
                              ]}
                              data-heading={subsubheading.slug}
                            >
                              {subsubheading.text}
                            </a>
                          </li>
                        ))}
                      </ul>
                    )}
                  </li>
                ))}
              </ul>
            )}
          </li>
        ))}
      </ul>
    </nav>

    <div class="mobile-toc-container block xl:hidden">
      <div
        class="mobile-toc-header fixed left-0 right-0 top-0 z-40 flex items-center justify-between border-b border-slate-200 bg-white/80 px-4 py-3 text-sm font-medium text-slate-600 backdrop-blur transition-transform duration-300 dark:border-slate-700 dark:bg-slate-900/80"
        id="mobile-toc-header"
      >
        <span class="current-heading flex-1 truncate text-sm font-medium text-slate-700 dark:text-slate-200" id="current-heading">
          Table of Contents
        </span>
        <button
          class="toc-toggle inline-flex h-9 w-9 items-center justify-center rounded-md text-slate-600 transition hover:bg-slate-100 dark:text-slate-200 dark:hover:bg-slate-800"
          id="toc-toggle"
          aria-label="Toggle table of contents"
        >
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M3 12h18M3 6h18M3 18h18" />
          </svg>
        </button>
      </div>

      <div
        class="mobile-toc-overlay invisible fixed inset-0 z-50 bg-black/40 opacity-0 transition duration-300 ease-in-out dark:bg-black/70"
        id="mobile-toc-overlay"
      >
        <div
          class="mobile-toc-content absolute right-0 top-0 flex h-full w-4/5 max-w-xs translate-x-full flex-col overflow-y-auto bg-white shadow-2xl transition-transform duration-300 dark:bg-slate-900"
        >
          <div class="mobile-toc-header-full flex items-center justify-between border-b border-slate-200 px-4 py-3 dark:border-slate-700">
            <h4 class="text-base font-semibold text-slate-700 dark:text-slate-100">Table of Contents</h4>
            <button
              class="toc-close inline-flex h-8 w-8 items-center justify-center rounded-md text-slate-600 transition hover:bg-slate-100 dark:text-slate-200 dark:hover:bg-slate-800"
              id="toc-close"
              aria-label="Close table of contents"
            >
              <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M18 6L6 18M6 6l12 12" />
              </svg>
            </button>
          </div>
          <ul class="mobile-toc-list space-y-2 px-4 py-4">
            {toc.map((heading) => (
              <li class="mobile-toc-item" data-level={heading.depth}>
                <a
                  href={`#${heading.slug}`}
                  class:list={[
                    "mobile-toc-link block border-l-2 border-transparent pl-3 text-base text-slate-600 transition hover:border-accent hover:text-accent dark:text-slate-200",
                    heading.depth === 3 && "text-sm opacity-80",
                    heading.depth === 4 && "text-xs opacity-70 pl-5",
                  ]}
                  data-heading={heading.slug}
                >
                  {heading.text}
                </a>
                {heading.subheadings.length > 0 && (
                  <ul class="mobile-toc-sublist ml-3 space-y-2">
                    {heading.subheadings.map((subheading: any) => (
                      <li class="mobile-toc-item" data-level={subheading.depth}>
                        <a
                          href={`#${subheading.slug}`}
                          class:list={[
                            "mobile-toc-link block border-l-2 border-transparent pl-4 text-base text-slate-600 transition hover:border-accent hover:text-accent dark:text-slate-200",
                            subheading.depth === 3 && "text-sm opacity-80",
                            subheading.depth === 4 && "text-xs opacity-70 pl-6",
                          ]}
                          data-heading={subheading.slug}
                        >
                          {subheading.text}
                        </a>
                        {subheading.subheadings && subheading.subheadings.length > 0 && (
                          <ul class="mobile-toc-sublist ml-3 space-y-2">
                            {subheading.subheadings.map((subsubheading: any) => (
                              <li class="mobile-toc-item" data-level={subsubheading.depth}>
                                <a
                                  href={`#${subsubheading.slug}`}
                                  class:list={[
                                    "mobile-toc-link block border-l-2 border-transparent pl-6 text-base text-slate-600 transition hover:border-accent hover:text-accent dark:text-slate-200",
                                    subsubheading.depth === 3 && "text-sm opacity-80",
                                    subsubheading.depth === 4 && "text-xs opacity-70 pl-8",
                                  ]}
                                  data-heading={subsubheading.slug}
                                >
                                  {subsubheading.text}
                                </a>
                              </li>
                            ))}
                          </ul>
                        )}
                      </li>
                    ))}
                  </ul>
                )}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  </>
)}
<script>
  class TableOfContents {
    private observer!: IntersectionObserver;
    private headings: NodeListOf<Element>;
    private tocLinks: NodeListOf<HTMLAnchorElement>;
    private mobileTocLinks: NodeListOf<HTMLAnchorElement>;
    private mobileHeader: HTMLElement | null;
    private currentHeadingSpan: HTMLElement | null;
    private tocToggle: HTMLElement | null;
    private tocClose: HTMLElement | null;
    private mobileOverlay: HTMLElement | null;
    private desktopTocToggle: HTMLElement | null;
    private desktopToc: HTMLElement | null;
    private activeHeading: string = '';
    private isDesktop: boolean = window.innerWidth >= 1180;

    constructor() {
      this.headings = document.querySelectorAll('h2[id], h3[id], h4[id]');
      this.tocLinks = document.querySelectorAll('.toc-link');
      this.mobileTocLinks = document.querySelectorAll('.mobile-toc-link');
      this.mobileHeader = document.getElementById('mobile-toc-header');
      this.currentHeadingSpan = document.getElementById('current-heading');
      this.tocToggle = document.getElementById('toc-toggle');
      this.tocClose = document.getElementById('toc-close');
      this.mobileOverlay = document.getElementById('mobile-toc-overlay');
      this.desktopTocToggle = document.getElementById('desktop-toc-toggle');
      this.desktopToc = document.querySelector('.desktop-toc');

      this.init();
    }

    private init() {
      this.setupIntersectionObserver();
      this.setupMobileToggle();
      this.setupDesktopToggle();
      this.setupClickHandlers();
      this.handleResize();
      
      window.addEventListener('resize', () => this.handleResize());
    }

    private setupIntersectionObserver() {
      const options = {
        rootMargin: '-20% 0px -70% 0px',
        threshold: 0
      };

      this.observer = new IntersectionObserver((entries) => {
        const intersectingEntries = entries.filter(entry => entry.isIntersecting);

        if (intersectingEntries.length > 0) {
          // Sort intersecting entries by their vertical position on the screen (topmost first)
          intersectingEntries.sort((a, b) => a.boundingClientRect.top - b.boundingClientRect.top);
          
          // The first entry in the sorted list is the highest one currently intersecting
          const id = intersectingEntries[0].target.getAttribute('id');
          if (id) {
            this.setActiveHeading(id);
          }
        }
        // If no entries are intersecting, the active heading remains unchanged (current behavior).
      }, options);

      this.headings.forEach((heading) => {
        this.observer.observe(heading);
      });
    }

    private setActiveHeading(id: string) {
      this.activeHeading = id;
      
      // Update desktop ToC
      this.tocLinks.forEach((link) => {
        link.classList.remove('active');
        if (link.getAttribute('data-heading') === id) {
          link.classList.add('active');
          this.expandParentSublists(link);
        }
      });

      // Update mobile ToC
      this.mobileTocLinks.forEach((link) => {
        link.classList.remove('active');
        if (link.getAttribute('data-heading') === id) {
          link.classList.add('active');
        }
      });

      // Update mobile header
      if (this.currentHeadingSpan) {
        const activeHeading = document.getElementById(id);
        if (activeHeading) {
          this.currentHeadingSpan.textContent = activeHeading.textContent || 'Table of Contents';
        }
      }

      // Show/hide mobile header based on scroll position
      if (!this.isDesktop) {
        const firstHeading = this.headings[0];
        if (firstHeading) {
          const rect = firstHeading.getBoundingClientRect();
          const shouldShow = rect.top < 400;
          
          if (this.mobileHeader) {
            this.mobileHeader.classList.toggle('visible', shouldShow);
          }
        }
      }
    }

    private expandParentSublists(activeLink: HTMLAnchorElement) {
      // First, collapse all sublists
      const allSublists = document.querySelectorAll('.toc-sublist');
      allSublists.forEach((sublist) => {
        sublist.classList.remove('expanded');
      });

      // Get the active heading ID
      const activeId = activeLink.getAttribute('data-heading');
      if (!activeId) return;

      // Find the active link in the ToC and expand its parent sublists
      let currentElement = activeLink.parentElement; // Start from the li containing the active link
      
      while (currentElement) {
        // If we find a sublist, expand it
        if (currentElement.classList.contains('toc-sublist')) {
          currentElement.classList.add('expanded');
        }
        
        // Move up to the parent element
        currentElement = currentElement.parentElement;
        
        // Stop when we reach the main toc-list
        if (currentElement && currentElement.classList.contains('toc-list')) {
          break;
        }
      }

      // Also expand any direct sublists of the active heading
      const activeItem = activeLink.closest('.toc-item');
      if (activeItem) {
        const directSublist = activeItem.querySelector('.toc-sublist');
        if (directSublist) {
          directSublist.classList.add('expanded');
        }
      }
    }

    private setupMobileToggle() {
      if (this.tocToggle && this.mobileOverlay) {
        this.tocToggle.addEventListener('click', () => {
          if (this.mobileOverlay) {
            this.mobileOverlay.classList.add('visible');
          }
        });
      }

      if (this.tocClose && this.mobileOverlay) {
        this.tocClose.addEventListener('click', () => {
          if (this.mobileOverlay) {
            this.mobileOverlay.classList.remove('visible');
          }
        });
      }

      // Close on overlay click
      if (this.mobileOverlay) {
        this.mobileOverlay.addEventListener('click', (e) => {
          if (e.target === this.mobileOverlay) {
            if (this.mobileOverlay) {
              this.mobileOverlay.classList.remove('visible');
            }
          }
        });
      }
    }

    private setupDesktopToggle() {
      if (this.desktopTocToggle && this.desktopToc) {
        this.desktopTocToggle.addEventListener('click', () => {
          if (this.desktopToc) {
            this.desktopToc.classList.toggle('collapsed');
          }
        });
      }
    }

    private setupClickHandlers() {
      // Close mobile overlay when clicking on a link
      this.mobileTocLinks.forEach((link) => {
        link.addEventListener('click', () => {
          if (this.mobileOverlay) {
            this.mobileOverlay.classList.remove('visible');
          }
        });
      });
    }

    private handleResize() {
      this.isDesktop = window.innerWidth >= 1180;
      
      if (this.isDesktop && this.mobileOverlay) {
        this.mobileOverlay.classList.remove('visible');
      }
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new TableOfContents();
  });
</script> 