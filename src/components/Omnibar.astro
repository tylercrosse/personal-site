<button
  id="omnibar-trigger"
  class="search-trigger inline-flex items-center gap-2 rounded-md border border-slate-200 bg-white px-3 py-2 text-sm text-slate-600 shadow-sm transition-colors duration-150 hover:border-accent hover:text-accent focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-accent dark:border-slate-700 dark:bg-slate-800 dark:text-slate-200"
  title="Search"
  aria-label="Search"
>
  <svg
    width="16"
    height="16"
    viewBox="0 0 24 24"
    fill="none"
    stroke="currentColor"
    stroke-width="2"
    stroke-linecap="round"
    stroke-linejoin="round"
  >
    <circle cx="11" cy="11" r="8"></circle>
    <path d="m21 21-4.35-4.35"></path>
  </svg>
  <span class="search-placeholder hidden text-sm font-medium text-slate-500 sm:inline">
    Search...
  </span>
  <kbd class="search-kbd ml-2">⌘K</kbd>
</button>

<div
  id="omnibar-overlay"
  class="omnibar-overlay fixed inset-0 z-50 flex items-center justify-center bg-slate-900/60 px-4 py-8"
  style="display: none;"
>
  <div
    class="omnibar-container w-full max-w-2xl rounded-2xl bg-white p-6 shadow-2xl ring-1 ring-black/5 dark:bg-slate-900 dark:ring-white/10"
  >
    <div
      class="omnibar-input-container flex items-center gap-3 rounded-lg border border-slate-200 bg-slate-50 px-4 py-3 dark:border-slate-700 dark:bg-slate-800"
    >
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
        stroke-linecap="round"
        stroke-linejoin="round"
        class="text-slate-400 dark:text-slate-500"
      >
        <circle cx="11" cy="11" r="8"></circle>
        <path d="m21 21-4.35-4.35"></path>
      </svg>
      <input
        id="omnibar-input"
        type="text"
        placeholder="Search pages and posts..."
        class="omnibar-input w-full bg-transparent text-base text-slate-900 outline-none placeholder:text-slate-400 dark:text-slate-100"
        autocomplete="off"
        spellcheck="false"
      />
    </div>
    <div id="omnibar-results" class="omnibar-results mt-4 max-h-96 space-y-4 overflow-y-auto">
      <div class="results-section space-y-2" id="pages-default-section">
        <div class="section-title text-xs font-semibold uppercase tracking-wide text-slate-500">
          Pages
        </div>
        <div
          class="result-item cursor-pointer rounded-lg border border-transparent bg-white px-4 py-3 shadow-sm transition hover:border-accent hover:bg-accent/10 dark:bg-slate-900 dark:hover:bg-accent/20"
          data-href="/"
          data-index="0"
        >
          <div class="result-title font-medium text-slate-800 dark:text-slate-100">Home</div>
          <div class="result-description text-sm text-slate-500 dark:text-slate-300">
            Welcome to my personal site
          </div>
        </div>
        <div
          class="result-item cursor-pointer rounded-lg border border-transparent bg-white px-4 py-3 shadow-sm transition hover:border-accent hover:bg-accent/10 dark:bg-slate-900 dark:hover:bg-accent/20"
          data-href="/ideas"
          data-index="1"
        >
          <div class="result-title font-medium text-slate-800 dark:text-slate-100">Ideas</div>
          <div class="result-description text-sm text-slate-500 dark:text-slate-300">
            My thoughts and writings
          </div>
        </div>
        <div
          class="result-item cursor-pointer rounded-lg border border-transparent bg-white px-4 py-3 shadow-sm transition hover:border-accent hover:bg-accent/10 dark:bg-slate-900 dark:hover:bg-accent/20"
          data-href="/about"
          data-index="2"
        >
          <div class="result-title font-medium text-slate-800 dark:text-slate-100">About</div>
          <div class="result-description text-sm text-slate-500 dark:text-slate-300">
            Learn more about me
          </div>
        </div>
      </div>
      <div class="results-section space-y-2" id="recent-posts-section">
        <div class="section-title text-xs font-semibold uppercase tracking-wide text-slate-500">
          Recent Posts
        </div>
        <!-- Recent posts will be populated by JavaScript -->
      </div>
      <div
        class="results-section space-y-2"
        id="search-results-section"
        style="display: none;"
      >
        <div class="section-title text-xs font-semibold uppercase tracking-wide text-slate-500">
          Search Results
        </div>
        <div id="search-results-container" class="space-y-3"></div>
      </div>
    </div>
    <div class="keyboard-shortcuts mt-6 flex flex-wrap items-center justify-between gap-3 text-xs text-slate-500">
      <div class="shortcut-item flex items-center gap-2">
        <kbd>↑</kbd>
        <kbd>↓</kbd>
        <span>Navigate</span>
      </div>
      <div class="shortcut-item flex items-center gap-2">
        <kbd>Enter</kbd>
        <span>Open</span>
      </div>
      <div class="shortcut-item flex items-center gap-2">
        <kbd>Esc</kbd>
        <span>Close</span>
      </div>
    </div>
  </div>
</div>

    private async init() {
      this.setupEventListeners();
      await this.loadRecentPosts();
      this.isSearching = false;
      this.updateResultItems();
      this.selectedIndex = 0;
      this.updateSelection();
    }

    private setupEventListeners() {
      // Trigger click
      this.trigger.addEventListener("click", () => this.open());

      // Keyboard shortcuts
      document.addEventListener("keydown", (e) => {
        if ((e.metaKey || e.ctrlKey) && (e.key === "k" || e.key === "/")) {
          e.preventDefault();
          this.open();
        }

        if (this.isOpen()) {
          if (e.key === "Escape") {
            this.close();
          } else if (e.key === "ArrowDown") {
            e.preventDefault();
            this.selectNext();
          } else if (e.key === "ArrowUp") {
            e.preventDefault();
            this.selectPrevious();
          } else if (e.key === "Enter") {
            e.preventDefault();
            this.navigateToSelected();
          }
        }
      });

      // Click outside to close
      this.overlay.addEventListener("click", (e) => {
        if (e.target === this.overlay) {
          this.close();
        }
        // If the click is on a sub-result item, open the page
        const subResultItem = (e.target as HTMLElement).closest(
          ".sub-result-item"
        ) as HTMLElement;
        if (subResultItem && subResultItem.dataset.href) {
          window.location.href = subResultItem.dataset.href;
          this.close();
        }
      });

      // Search input
      this.input.addEventListener("input", () => {
        this.handleSearch();
      });

      // Result item clicks
      this.results.addEventListener("click", (e) => {
        const resultItem = (e.target as HTMLElement).closest(
          ".result-item"
        ) as HTMLElement;
        if (resultItem && resultItem.dataset.href) {
          window.location.href = resultItem.dataset.href;
        }
      });
    }

    private async loadRecentPosts() {
      try {
        const recentPostsSection = document.getElementById(
          "recent-posts-section"
        )!;

        // Use real recent posts data if available, otherwise fallback
        const recentPosts = (window as any).recentPosts || [
          {
            title: "Anchoring To Text Fragment",
            href: "/ideas/anchoring-to-text-fragment",
            description: "Web standards for linking to text",
          },
          {
            title: "Reflections on My 2024",
            href: "/ideas/reflections-on-my-2024",
            description: "Looking back at the year",
          },
          {
            title: "Upgrading Astro Code Snippets",
            href: "/ideas/upgrading-astro-code-snippets",
            description: "Improving syntax highlighting",
          },
        ];

        let index = 3; // Continue from pages
        recentPosts.forEach((post: any) => {
          const item = document.createElement("div");
          item.className = "result-item";
          item.dataset.href = post.href;
          item.dataset.index = index.toString();
          item.innerHTML = `
            <div class="result-title">${post.title}</div>
            <div class="result-description">${post.description}</div>
          `;
          recentPostsSection.appendChild(item);
          index++;
        });
      } catch (error) {
        console.error("Failed to load recent posts:", error);
      }
    }

    private handleSearch() {
      const query = this.input.value.trim();
      if (this.searchTimeout) clearTimeout(this.searchTimeout);

      this.searchTimeout = window.setTimeout(async () => {
        if (query.length > 0) {
          this.isSearching = true;
          this.showSearchResults(); // Hide defaults, show search area
          await this.performSearch(query); // Fill search area with results (updates DOM)
        } else {
          this.isSearching = false;
          this.showDefaultResults(); // Hide search area, show defaults (updates DOM)
        }
        // AFTER DOM is definitively updated by either performSearch or showDefaultResults:
        this.updateResultItems(); // Rebuild this.resultItems from the current DOM state
        this.selectedIndex = 0; // Reset index to point to the first item in the new list
        this.updateSelection(); // Visually select that first item
      }, 150);
    }

    private async performSearch(query: string) {
      const container = document.getElementById("search-results-container")!;
      container.innerHTML = ""; // Clear previous results
      try {
        let resultsGenerated = false;
        if ((window as any).pagefind) {
          const search = await (window as any).pagefind.search(query);

          if (search.results.length > 0) {
            // Render results
            const pageResults = await Promise.all(
              search.results.slice(0, 5).map((r: any) => r.data())
            );

            for (const page of pageResults) {
              if (page.sub_results.length === 0) continue;

              const groupEl = document.createElement("div");
              groupEl.className = "result-group";

              // Ensure the group starts a main page entry
              let subResults = page.sub_results.slice(0, 3);
              const firstSubResult = subResults[0];
              const hasMainPageEntry =
                firstSubResult && !("anchor" in firstSubResult);
              if (!hasMainPageEntry) {
                const item = document.createElement("div");
                item.className = "result-item";
                item.dataset.href = page.url;
                item.innerHTML = `
                  <div class="result-title">${page.meta.title}</div>
                  <div class="result-description">${page.excerpt}</div>
                `;
                groupEl.appendChild(item);
              } else {
                // If the main page entry is present, show 4 results. The first is the main page entry.
                subResults = page.sub_results.slice(0, 4);
              }

              for (const sub_result of subResults) {
                const item = document.createElement("div");
                item.className = "result-item";
                item.dataset.href = sub_result.url;

                if ("anchor" in sub_result) {
                  item.classList.add("sub-result-item");
                }

                item.innerHTML = `
                  <div class="result-title">${sub_result.title}</div>
                  <div class="result-description">${sub_result.excerpt}</div>
                `;
                groupEl.appendChild(item);
              }
              container.appendChild(groupEl);
            }
            resultsGenerated = true;
          }
        } else {
          // Fallback logic
          const fallbackResults = (
            [
              {
                title: "Home",
                href: "/",
                description: "Welcome to my personal site",
              },
              {
                title: "Ideas",
                href: "/ideas",
                description: "My thoughts and writings",
              },
              {
                title: "About",
                href: "/about",
                description: "Learn more about me",
              },
            ] as { title: string; href: string; description: string }[]
          ).filter(
            // Filter out results that don't match the query
            (f) =>
              f.title.toLowerCase().includes(query.toLowerCase()) ||
              f.description.toLowerCase().includes(query.toLowerCase())
          );
          if (fallbackResults.length > 0) {
            fallbackResults.forEach((r) => {
              const item = document.createElement("div");
              item.className = "result-item";
              item.dataset.href = r.href;
              item.innerHTML = `<div class="result-title">${r.title}</div><div class="result-description">${r.description}</div>`;
              container.appendChild(item);
            });
            resultsGenerated = true;
          }
        }
        if (!resultsGenerated) {
          container.innerHTML = '<p class="no-results">No results found.</p>';
        }
      } catch (error) {
        console.error("Search failed:", error);
        container.innerHTML =
          '<p class="no-results">Search error. Please try again.</p>';
      }
    }

    private showSearchResults() {
      const pagesSection = document.getElementById(
        "pages-default-section"
      )! as HTMLElement;
      const recentPostsSection = document.getElementById(
        "recent-posts-section"
      )! as HTMLElement;
      const searchSection = document.getElementById(
        "search-results-section"
      )! as HTMLElement;

      pagesSection.style.display = "none";
      recentPostsSection.style.display = "none";
      searchSection.style.display = "block";
    }

    private showDefaultResults() {
      const pagesSection = document.getElementById(
        "pages-default-section"
      )! as HTMLElement;
      const recentPostsSection = document.getElementById(
        "recent-posts-section"
      )! as HTMLElement;
      const searchSection = document.getElementById(
        "search-results-section"
      )! as HTMLElement;

      searchSection.style.display = "none";
      pagesSection.style.display = "block";
      recentPostsSection.style.display = "block";
    }

    private updateResultItems() {
      this.resultItems = []; // Clear previous items
      if (this.isSearching) {
        // When searching, only items in search-results-container are relevant
        const searchItems = document.querySelectorAll(
          "#search-results-container .result-item"
        );
        this.resultItems = Array.from(searchItems) as HTMLElement[];
      } else {
        // When not searching, items from default sections are relevant
        const pageItems = document.querySelectorAll(
          "#pages-default-section .result-item"
        );
        const recentItems = document.querySelectorAll(
          "#recent-posts-section .result-item"
        );
        this.resultItems = [
          ...(Array.from(pageItems) as HTMLElement[]),
          ...(Array.from(recentItems) as HTMLElement[]),
        ];
      }
    }

    private selectNext() {
      this.selectedIndex = Math.min(
        this.selectedIndex + 1,
        this.resultItems.length - 1
      );
      this.updateSelection();
    }

    private selectPrevious() {
      this.selectedIndex = Math.max(this.selectedIndex - 1, 0);
      this.updateSelection();
    }

    private updateSelection() {
      this.resultItems.forEach((item, index) => {
        item.classList.toggle("selected", index === this.selectedIndex);
      });

      // Scroll selected item into view
      if (this.resultItems[this.selectedIndex]) {
        this.resultItems[this.selectedIndex].scrollIntoView({
          block: "nearest",
          behavior: "smooth",
        });
      }
    }

    private navigateToSelected() {
      const selectedItem = this.resultItems[this.selectedIndex];
      if (selectedItem && selectedItem.dataset.href) {
        window.location.href = selectedItem.dataset.href;
        this.close();
      }
    }

    private open() {
      document.body.appendChild(this.overlay);
      this.overlay.style.display = "flex";
      this.input.focus();
      this.input.value = ""; // Clear input
      this.isSearching = false; // Set to default mode
      this.showDefaultResults(); // Show default sections
      this.updateResultItems(); // Update item list from default sections
      this.selectedIndex = 0; // Select first default item
      this.updateSelection(); // Visually mark it
      document.body.style.overflow = "hidden";
    }

    private close() {
      this.overlay.style.display = "none";
      if (this.overlay.parentNode === document.body) {
        document.body.removeChild(this.overlay);
      }
      this.input.value = ""; // Clear input
      this.isSearching = false; // Reset search state
      // Clear visual selection from any items that might have had it
      this.resultItems.forEach((item) => item.classList.remove("selected"));
      this.selectedIndex = 0; // Reset index for the next open
      // this.resultItems will be rebuilt on next open, so no need to clear it here
      document.body.style.overflow = "";
    }

    private isOpen(): boolean {
      return this.overlay.style.display !== "none";
    }
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", () => {
    new Omnibar();
  });
</script>

<style>
  .search-trigger {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 0.75rem;
    background: rgba(var(--gray-light), 0.6);
    /* border: 1px solid var(--base4); */
    border: none;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 0.875rem;
    color: rgb(var(--gray-dark));
    min-width: 200px;
  }

  .search-trigger:hover {
    background: rgba(var(--black), 0.15);
    border-color: rgba(var(--black), 0.3);
  }

  .search-placeholder {
    flex: 1;
    text-align: left;
  }

  .omnibar-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.5);
    backdrop-filter: blur(4px);
    z-index: 1000;
    display: flex;
    align-items: flex-start;
    justify-content: center;
    padding-top: 10vh;
  }

  @keyframes omnibar-open-animation {
    from {
      transform: scale(1.05);
      opacity: 0;
      filter: blur(15px);
    }
    to {
      transform: scale(1);
      opacity: 1;
      filter: blur(0px);
    }
  }

  .omnibar-container {
    animation: omnibar-open-animation 0.2s cubic-bezier(0.43, 0.195, 0.02, 1);
    background: white;
    border-radius: 12px;
    box-shadow:
      0 20px 25px -5px rgba(0, 0, 0, 0.1),
      0 10px 10px -5px rgba(0, 0, 0, 0.04);
    width: 90%;
    max-width: 600px;
    max-height: 70vh;
    overflow: hidden;
    border: 1px solid rgba(var(--gray-light), 0.2);
  }

  :global([data-effective-theme="dark"]) .omnibar-container {
    background: #073642;
    border-color: rgba(255, 255, 255, 0.1);
  }

  .omnibar-input-container {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-bottom: 1px solid rgba(var(--gray-light), 0.2);
  }

  :global([data-effective-theme="dark"]) .omnibar-input-container {
    border-bottom-color: rgba(255, 255, 255, 0.1);
  }

  .search-icon {
    color: rgb(var(--gray));
    flex-shrink: 0;
  }

  .omnibar-input {
    flex: 1;
    border: none;
    outline: none;
    font-size: 1rem;
    background: transparent;
    color: rgb(var(--black));
  }

  :global([data-effective-theme="dark"]) .omnibar-input {
    color: rgb(var(--black));
  }

  .omnibar-input::placeholder {
    color: rgb(var(--gray));
  }

  .omnibar-results {
    max-height: 50vh;
    overflow-y: auto;
    padding: 0.5rem 0;
  }

  .results-section {
    margin-bottom: 1rem;
  }

  .results-section:last-child {
    margin-bottom: 0;
  }

  .section-title {
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    color: rgb(var(--gray));
    padding: 0.5rem 1rem;
    margin-bottom: 0.25rem;
  }

  :global(mark) {
    background: transparent;
    color: var(--accent-dark);
  }

  :global(.result-item) {
    padding: 0.75rem 1rem;
    cursor: pointer;
    border-left: 3px solid transparent;
    transition: all 0.15s ease;
  }

  :global(.result-item:hover) {
    background: color-mix(in srgb, var(--accent) 10%, transparent);
    border-left-color: var(--accent);
  }

  :global(.result-item.selected) {
    background: color-mix(in srgb, var(--accent) 20%, transparent);
    border-left-color: var(--accent);
  }

  :global(.result-title) {
    font-weight: 500;
    font-size: 1rem;
    color: rgb(var(--black));
    margin-bottom: 0.25rem;
  }

  :global(.result-description) {
    font-size: 0.875rem;
    color: rgb(var(--gray));
    line-height: 1.4;
  }

  .result-group {
    padding: 0.5rem 0;
  }

  .result-group-title {
    font-size: 0.875rem;
    font-weight: 600;
    /* color: rgb(var(--black)); */
    padding: 0.5rem 1rem;
  }

  :global([data-effective-theme="dark"]) .result-group-title {
    color: rgb(var(--white));
  }

  :global(.sub-result-item) {
    padding-left: 2.5rem;
  }

  :global(.sub-result-item .result-title) {
    font-size: 0.875rem;
    /* font-weight: 400; */
    /* color: rgb(var(--gray-dark)); */
  }

  .keyboard-shortcuts {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    padding: 0.75rem 1rem;
    border-top: 1px solid rgba(var(--gray-light), 0.2);
    background: rgba(var(--gray-light), 0.05);
    font-size: 0.75rem;
    color: rgb(var(--gray));
  }

  :global([data-effective-theme="dark"]) .keyboard-shortcuts {
    border-top-color: rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.02);
  }

  .shortcut-item {
    display: flex;
    align-items: center;
    gap: 0.375rem;
  }

  .keyboard-shortcuts kbd {
    background: rgba(var(--gray-light), 0.3);
    border: 1px solid rgba(var(--gray-light), 0.4);
    border-radius: 3px;
    padding: 0.125rem 0.25rem;
    font-size: 0.625rem;
    font-family: ui-monospace, "SF Mono", Monaco, "Cascadia Code", "Roboto Mono",
      Consolas, "Courier New", monospace;
    color: rgb(var(--gray-dark));
    min-width: 1.25rem;
    text-align: center;
  }

  :global([data-effective-theme="dark"]) .keyboard-shortcuts kbd {
    background: rgba(255, 255, 255, 0.1);
    border-color: rgba(255, 255, 255, 0.2);
  }

  /* Dark theme adjustments */
  :global([data-effective-theme="dark"]) .search-trigger {
    background: rgba(255, 255, 255, 0.05);
    border-color: rgba(255, 255, 255, 0.1);
  }

  :global([data-effective-theme="dark"]) .search-trigger:hover {
    background: rgba(255, 255, 255, 0.08);
    border-color: rgba(255, 255, 255, 0.15);
  }

  /* Responsive */
  @media (max-width: 640px) {
    .search-trigger {
      min-width: auto;
      padding: 0.5rem;
    }

    .search-placeholder {
      display: none;
    }

    .omnibar-container {
      width: 95%;
      margin: 0 auto;
    }

    .omnibar-overlay {
      padding-top: 5vh;
    }
  }

  .no-results {
    padding: 1rem;
    text-align: center;
    color: rgb(var(--gray));
  }
</style>
