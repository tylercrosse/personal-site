---
// Import the global.css file here so that it is included on
// all pages through the use of the <BaseHead /> component.
import "katex/dist/katex.min.css";
import "../styles/global.css";
import { SITE_TITLE } from "../consts";
import RecentPostsScript from "./RecentPostsScript.astro";
import { getImage } from "astro:assets";

interface Props {
  title: string;
  description: string;
  image?: string | ImageMetadata;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);
const defaultImage = "/blog-placeholder-2.jpg";

const { title, description, image = defaultImage } = Astro.props;

// Helper function to get the proper image URL for Open Graph
const getImageURL = async (imageInput: string | ImageMetadata | undefined) => {
  if (!imageInput) {
    return new URL(defaultImage, Astro.site).href;
  }

  // If it's a string, handle different path types
  if (typeof imageInput === "string") {
    // If it's already an absolute URL, use it as-is
    if (imageInput.startsWith("http://") || imageInput.startsWith("https://")) {
      return imageInput;
    }

    // If it starts with a slash, it's a public path
    if (imageInput.startsWith("/")) {
      return new URL(imageInput, Astro.site).href;
    }

    // For relative paths, we'll need to construct the public path
    // This is a fallback - ideally we should receive processed ImageMetadata
    return new URL(imageInput, Astro.site).href;
  }

  // If it's ImageMetadata (processed by Astro), get the optimized URL
  try {
    const optimizedImage = await getImage({ src: imageInput });
    return new URL(optimizedImage.src, Astro.site).href;
  } catch (error) {
    console.warn("Failed to process image for Open Graph:", error);
    return new URL(defaultImage, Astro.site).href;
  }
};

const imageURL = await getImageURL(image);
---

<!-- Theme script to prevent FOUC -->
<script is:inline>
  // This script runs before the page renders to prevent flash of unstyled content
  (function () {
    function getStoredTheme() {
      if (typeof localStorage !== "undefined") {
        const stored = localStorage.getItem("theme");
        if (["light", "dark", "system"].includes(stored)) {
          return stored;
        }
      }
      return "system";
    }

    function getSystemTheme() {
      return window.matchMedia("(prefers-color-scheme: dark)").matches
        ? "dark"
        : "light";
    }

    function getEffectiveTheme(theme) {
      return theme === "system" ? getSystemTheme() : theme;
    }

    const theme = getStoredTheme();
    const effectiveTheme = getEffectiveTheme(theme);
    document.documentElement.setAttribute("data-theme", theme);
    document.documentElement.setAttribute(
      "data-effective-theme",
      effectiveTheme
    );
  })();
</script>

<!-- Recent Posts Data -->
<RecentPostsScript />

<!-- Pagefind Search -->
<script is:inline>
  // Load Pagefind search functionality
  (async function () {
    try {
      if (typeof window !== "undefined") {
        const pagefind = await import("/pagefind/pagefind.js");
        window.pagefind = pagefind;
      }
    } catch (error) {
      console.log("Pagefind not available:", error);
    }
  })();
</script>

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="sitemap" href="/sitemap-index.xml" />
<link
  rel="alternate"
  type="application/rss+xml"
  title={SITE_TITLE}
  href={new URL("rss.xml", Astro.site)}
/>
<meta name="generator" content={Astro.generator} />

<link rel="preconnect" href="https://fonts.googleapis.com" />
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
<link
  href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans:ital,wght@0,100..700;1,100..700&family=Source+Serif+4:ital,opsz,wght@0,8..60,200..900;1,8..60,200..900&display=swap"
  rel="stylesheet"
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<meta name="title" content={`${title} | ${SITE_TITLE}`} />
<meta name="description" content={description} />

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={`${title} | ${SITE_TITLE}`} />
<meta property="og:description" content={description} />
<meta property="og:image" content={imageURL} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={`${title} | ${SITE_TITLE}`} />
<meta property="twitter:description" content={description} />
<meta property="twitter:image" content={imageURL} />
