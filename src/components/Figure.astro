---
import { Image } from "astro:assets";

interface Props {
  src: string | ImageMetadata;
  alt: string;
  caption?: string;
  width?: number;
  height?: number;
  class?: string;
  numbered?: boolean;
  fullWidth?: boolean;
}

const {
  src,
  alt,
  caption,
  width,
  height,
  class: className,
  numbered = true,
  fullWidth = false,
} = Astro.props;

// Determine if src is a string (path) or ImageMetadata object
const isImagePath = typeof src === "string";

// Auto-generate figure numbers using Astro.locals
let figureNumber: number | undefined;
if (numbered) {
  // Initialize counter if it doesn't exist
  if (!Astro.locals.figureCounter) {
    Astro.locals.figureCounter = 0;
  }
  // Increment and get the current figure number
  Astro.locals.figureCounter++;
  figureNumber = Astro.locals.figureCounter;
}
---

<figure
  class:list={[
    "my-6 text-center",
    className,
    fullWidth && "col-span-full",
  ]}
>
  {
    isImagePath ? (
      <img
        src={src as string}
        alt={alt}
        width={width}
        height={height}
        loading="lazy"
        class="mx-auto w-full rounded-xl shadow-sm"
      />
    ) : (
      <Image
        src={src as ImageMetadata}
        alt={alt}
        quality={90}
        width={width}
        widths={width ? [width, width * 2] : undefined}
        height={height}
        loading="lazy"
        decoding="async"
      />
    )
  }
  {
    caption && (
      <figcaption class="mt-3 text-sm italic text-muted-light dark:text-muted">
        {numbered && figureNumber && (
          <strong class="font-semibold not-italic text-text-base dark:text-text-light">
            Figure {figureNumber}:{" "}
          </strong>
        )}
        {caption}
      </figcaption>
    )
  }
</figure>
